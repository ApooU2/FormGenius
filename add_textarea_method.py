#!/usr/bin/env python3
"""
Script to add the missing _generate_textarea method to the DataGenerator class.
"""

import os
import re

def add_textarea_method():
    """Add the missing _generate_textarea method to the DataGenerator class."""
    file_path = '/Users/apoorvaupadhyaya/Desktop/Repos/FormGenius/formgenius/core/data_generator.py'
    
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Define the method to add
    textarea_method = '''
    async def _generate_textarea(self, field: Dict[str, Any]) -> str:
        """Generate realistic content for a textarea field."""
        field_label = field.get('label', '').lower()
        field_name = field.get('name', '').lower()
        field_context = f"{field_label} {field_name}".lower()
        
        # Determine the appropriate content type based on context
        if any(keyword in field_context for keyword in ['comment', 'feedback']):
            return "This is a test comment for automated form testing. Please ignore."
        elif any(keyword in field_context for keyword in ['description']):
            return "Brief description for testing purposes."
        elif any(keyword in field_context for keyword in ['address']):
            return f"{self.fake.street_address()}, {self.fake.city()}, {self.fake.state()} {self.fake.zipcode()}"
        elif any(keyword in field_context for keyword in ['message']):
            return "This is a test message for form automation testing."
        elif any(keyword in field_context for keyword in ['bio', 'about']):
            return "Professional with experience in software testing and automation."
        else:
            # Generic textarea content
            return "This is test data for the textarea field generated by FormGenius."
    '''
    
    # Find the position to insert the method
    radio_method_pattern = r'async def _generate_radio_value.*?return selected_option\.get\(\'value\', \'\'\)'
    radio_method_match = re.search(radio_method_pattern, content, re.DOTALL)
    
    if radio_method_match:
        insertion_point = radio_method_match.end()
        
        # Insert the textarea method after the radio method
        modified_content = content[:insertion_point] + textarea_method + content[insertion_point:]
        
        # Write the modified content back to the file
        with open(file_path, 'w') as f:
            f.write(modified_content)
        
        print("Successfully added _generate_textarea method to DataGenerator class.")
    else:
        print("Could not find the _generate_radio_value method in the file.")

if __name__ == "__main__":
    add_textarea_method()
